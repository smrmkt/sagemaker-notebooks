#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

import pandas as pd

from sklearn import tree

# SageMaker のディレクトリ構成に合わせたパスの設定
prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# チャンネル名として 'training' を指定
# ここではデータ入力方式として FILE モードを指定するので，以下のディレクトリにデータがロードされる
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# 学習時に呼ばれる train メソッド
def train():
    print('Starting the training.')
    try:
        # 学習用データをロード
        input_files = [os.path.join(training_path, file) for file in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.').format(training_path))
        raw_data = [pd.read_csv(file, header=None) for file in input_files]
        train_data = pd.concat(raw_data)

        # データの最初のカラムはラベルなので切り分ける
        train_y = train_data.ix[:,0]
        train_X = train_data.ix[:,1:]

        # 学習ジョブ用のハイパーパラメタを読み出す
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # 読みだしたハイパーパラメタをセット
        # ハイパーパラメタは単一の値のみをサポート
        # 常に String で読みだされるため，適切な型変換が必要
        max_leaf_nodes = trainingParams.get('max_leaf_nodes', None)
        if max_leaf_nodes is not None:
            max_leaf_nodes = int(max_leaf_nodes)

        # scikit-learn で Decision Tree を実行
        classifier = tree.DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes)
        classifier = classifier.fit(train_X, train_y)

        # モデルの保存
        with open(os.path.join(model_path, 'decision-tree-model.pkl'), 'w') as out:
            pickle.dump(classifier, out)
        print('Training complete.')
    except Exception as e:
        # エラーの内容をファイルに保存して，コンソールにも出力
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # 0 以外の exit コードの場合に，ジョブが失敗したとみなされる
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
